// This file is part of RosettaCTF project.
//
// Copyright 2020 Emzi0767
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace RosettaCTF.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20200807202113_M01_Initialize")]
    partial class M01_Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RosettaCTF.Models.PostgresTeam", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("AvatarUrlInternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("avatar")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pkey_team_id");

                    b.HasAlternateKey("Name")
                        .HasName("ukey_team_name");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("RosettaCTF.Models.PostgresUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("AvatarUrlInternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("avatar")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.Property<long>("DiscordIdInternal")
                        .HasColumnName("discord_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnName("authorized")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("refresh_token")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.Property<long?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("bigint")
                        .HasDefaultValue(null);

                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("token")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.Property<DateTimeOffset?>("TokenExpirationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("token_expires_at")
                        .HasColumnType("timestamptz")
                        .HasDefaultValue(null);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pkey_user_id");

                    b.HasAlternateKey("Username")
                        .HasName("ukey_user_name");

                    b.HasIndex("TeamId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("RosettaCTF.Models.PostgresUser", b =>
                {
                    b.HasOne("RosettaCTF.Models.PostgresTeam", "TeamInternal")
                        .WithMany("MembersInternal")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fkey_user_team");
                });
#pragma warning restore 612, 618
        }
    }
}
