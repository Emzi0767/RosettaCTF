<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!-- 

  This file is part of RosettaCTF project.
  
  Copyright 2020 Emzi0767

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  
-->
<Project Sdk="Microsoft.NET.Sdk.Web">
  
  <Import Project="../RosettaCTF.Common.targets" />

  <PropertyGroup>
    <UserSecretsId>9a475dc9-e1f0-4af5-a274-fcab10ac1ed0</UserSecretsId>
  </PropertyGroup>
  
  <!-- References -->
  <ItemGroup Condition="'$(Configuration)' == 'Debug'">
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="3.1.8" />
  </ItemGroup>
  
  <ItemGroup>
    <PackageReference Include="EzOTP" Version="1.0.1" />
    <PackageReference Include="Microsoft.IdentityModel.Tokens" Version="6.7.1" />
    <PackageReference Include="NetEscapades.Configuration.Yaml" Version="2.0.1" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="6.7.1" />
  </ItemGroup>
  
  <ItemGroup>
    <ProjectReference Include="..\RosettaCTF.Abstractions\RosettaCTF.Abstractions.csproj" />
  </ItemGroup>
  
  <ItemGroup>
    <Content Update="config.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  
  <!-- 
    Reference plugins because otherwise we can't deploy them. Their references are stripped from the final assembly, 
    as we don't explicitly use any of their code, but they will all be loaded explicitly at run-time. Fact is, if we 
    don't reference them this way, their dependencies will not become transitive, and thusly, will not be deployed 
    alongside the application, making it so that any attempt to load them will likely succeed, however calling 
    anything defined in them will throw assembly loading exceptions (as their references might be missing). 
    Truthfully, I'd rather the binaries were deployed alongside the application as content, but due to how .NET Core 
    builds work, this cannot work, as it only deploys binaries built from the projects within the solution, leading us 
    back to square one - we have the plugins, but we lack their dependencies. There is an option to output all 
    dependencies to the build directory during build, but as far as I know it will output *everything*, including 
    design-only references (such as reference assemblies which only contain stubs, as their real implementations live
    inside mscorlib). Things like this, make me miss the .NETFX somewhat...
  -->
  <ItemGroup>
    <PluginProject Include="../challenge/**/*.csproj" />
    <PluginProject Include="../database/**/*.csproj" />
    <PluginProject Include="../cache/**/*.csproj" />
    <PluginProject Include="../oauth/**/*.csproj" />
    
    <ProjectReference Include="@(PluginProject)">
      <PrivateAssets>All</PrivateAssets>
      <ReferenceOutputAssembly>True</ReferenceOutputAssembly>
    </ProjectReference>
  </ItemGroup>
  
  <!-- SPA Settings -->
  <PropertyGroup>
    <SpaRoot>../RosettaCTF.UI</SpaRoot>
    <MinimumNodeVersion>10.0.0</MinimumNodeVersion>
    <BuildSpa>True</BuildSpa>
  </PropertyGroup>

  <!-- SPA build targets -->
  
  <!-- Emit all configuration in debug -->
  <Target Name="EmitSpaConfiguration" BeforeTargets="BeforeCompile" Condition="'$(Configuration)' == 'Debug' And '$(BuildSpa)' == 'True'">
    <ItemGroup>
      <AssemblyAttributes Include="RosettaCTF.SpaConfigurationAttribute">
        <_Parameter1>$(SpaRoot)</_Parameter1>
      </AssemblyAttributes>
    </ItemGroup>
    <WriteCodeFragment AssemblyAttributes="@(AssemblyAttributes)" Language="C#" OutputDirectory="$(IntermediateOutputPath)" OutputFile="SpaConfiguration.cs">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
  </Target>
  
  <!-- Ensure node.js is installed and usable -->
  <Target Name="EnsureNode" BeforeTargets="Build" Condition="'$(BuildSpa)' == 'True'">
    <Exec Command="node --version" ContinueOnError="true" ConsoleToMsBuild="True" StandardOutputImportance="Low">
      <Output TaskParameter="ExitCode" PropertyName="NodeErrorCode" />
      <Output TaskParameter="ConsoleOutput" PropertyName="NodeVersion" />
    </Exec>
    <Error Condition="'$(NodeErrorCode)' != '0'" Text="No working copy of node.js was detected. To build this project, node.js is required to be present and usable on your system. Consult https://nodejs.org/ for information on how to install node.js on your system." />
    <Error Condition="'$([System.Version]::Parse($(NodeVersion.Substring(1))).CompareTo($([System.Version]::Parse($(MinimumNodeVersion)))))' &lt; 0" Text="The version of node.js detected on your system is too old for this project. Please upgrade to version v$(MinimumNodeVersion) or later. Consult https://nodejs.org/ for information on how to install node.js on your system." />
    <Message Importance="High" Text="Detected node.js version $(NodeVersion)" />
  </Target>
  
  <!-- Restore node packages -->
  <Target Name="RestoreNodePackages" AfterTargets="EnsureNode" BeforeTargets="Build" Condition="'$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)/node_modules') And '$(BuildSpa)' == 'True'">
    <Message Importance="High" Text="Restoring npm packages for SPA build. This will take a while..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" ConsoleToMsBuild="True" StandardOutputImportance="Low" StandardErrorImportance="Normal" />
  </Target>

  <!-- Build SPA in production mode when building in Release -->
  <Target Name="BuildWebPack" AfterTargets="Build" Condition="'$(Configuration)' == 'Release' And '$(BuildSpa)' == 'True'">
    <Message Importance="High" Text="Removing SPA build artifacts" Condition="Exists('$(SpaRoot)/dist')" />
    <RemoveDir Directories="$(SpaRoot)/dist" Condition="Exists('$(SpaRoot)/dist')" />

    <Message Importance="High" Text="Building SPA components" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" ConsoleToMsBuild="True" StandardOutputImportance="Low" StandardErrorImportance="Normal" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run prod" ConsoleToMsBuild="True" StandardOutputImportance="Low" StandardErrorImportance="Normal" />
  </Target>
  
</Project>
